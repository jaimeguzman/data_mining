/**
 * 
 * import weka.associations.*;
import weka.core.*;
import weka.clusterers.*;
 */

import net.sf.javaml.*;
import net.sf.javaml.core.*;


import net.sf.javaml.core.DefaultDataset;
import net.sf.javaml.core.Instance;
import net.sf.javaml.tools.InstanceTools;
import net.sf.javaml.clustering.*;
import net.sf.javaml.clustering.evaluation.*;


import java.io.File;
import java.io.IOException;

import net.sf.javaml.clustering.Clusterer;
import net.sf.javaml.clustering.KMeans;
import net.sf.javaml.core.Dataset;
import net.sf.javaml.tools.data.FileHandler;


import java.util.*; 
import java.lang.Math;


/**
 * @author jaimeguzman
 *
 */
public class Main {

	/**
	 * @param args
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	public static void main(String[] args) throws IOException  {
        

		
        /* Load a dataset */
        Dataset data = FileHandler.loadDataset(new File("iris.data"), 4, ",");
        /*
         * Create a new instance of the KMeans algorithm, with no options
         * specified. By default this will generate 4 clusters.
         */
        Clusterer km = new KMeans();
        /*
         * Cluster the data, it will be returned as an array of data sets, with
         * each dataset representing a cluster
         */
        Dataset[] clusters = km.cluster(data);
        System.out.println("Cluster count: " + clusters.length);

        

	
	
	}
	
	




}